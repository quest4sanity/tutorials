package q4s.tutorials.mybatis.annot.entity;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

public class TasksHistExample {
    /**
	 * This field was generated by MyBatis Generator. This field corresponds to the database table TASKS_HIST
	 * @mbg.generated  Tue Jun 23 13:10:31 MSK 2020
	 */
	protected String orderByClause;
	/**
	 * This field was generated by MyBatis Generator. This field corresponds to the database table TASKS_HIST
	 * @mbg.generated  Tue Jun 23 13:10:31 MSK 2020
	 */
	protected boolean distinct;
	/**
	 * This field was generated by MyBatis Generator. This field corresponds to the database table TASKS_HIST
	 * @mbg.generated  Tue Jun 23 13:10:31 MSK 2020
	 */
	protected List<Criteria> oredCriteria;

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table TASKS_HIST
	 * @mbg.generated  Tue Jun 23 13:10:31 MSK 2020
	 */
	public TasksHistExample() {
		oredCriteria = new ArrayList<>();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table TASKS_HIST
	 * @mbg.generated  Tue Jun 23 13:10:31 MSK 2020
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table TASKS_HIST
	 * @mbg.generated  Tue Jun 23 13:10:31 MSK 2020
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table TASKS_HIST
	 * @mbg.generated  Tue Jun 23 13:10:31 MSK 2020
	 */
	public void setDistinct(boolean distinct) {
		this.distinct = distinct;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table TASKS_HIST
	 * @mbg.generated  Tue Jun 23 13:10:31 MSK 2020
	 */
	public boolean isDistinct() {
		return distinct;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table TASKS_HIST
	 * @mbg.generated  Tue Jun 23 13:10:31 MSK 2020
	 */
	public List<Criteria> getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table TASKS_HIST
	 * @mbg.generated  Tue Jun 23 13:10:31 MSK 2020
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table TASKS_HIST
	 * @mbg.generated  Tue Jun 23 13:10:31 MSK 2020
	 */
	public Criteria or() {
		Criteria criteria = createCriteriaInternal();
		oredCriteria.add(criteria);
		return criteria;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table TASKS_HIST
	 * @mbg.generated  Tue Jun 23 13:10:31 MSK 2020
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table TASKS_HIST
	 * @mbg.generated  Tue Jun 23 13:10:31 MSK 2020
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table TASKS_HIST
	 * @mbg.generated  Tue Jun 23 13:10:31 MSK 2020
	 */
	public void clear() {
		oredCriteria.clear();
		orderByClause = null;
		distinct = false;
	}

	/**
	 * This class was generated by MyBatis Generator. This class corresponds to the database table TASKS_HIST
	 * @mbg.generated  Tue Jun 23 13:10:31 MSK 2020
	 */
	protected abstract static class GeneratedCriteria {
		protected List<Criterion> criteria;

		protected GeneratedCriteria() {
			super();
			criteria = new ArrayList<>();
		}

		public boolean isValid() {
			return criteria.size() > 0;
		}

		public List<Criterion> getAllCriteria() {
			return criteria;
		}

		public List<Criterion> getCriteria() {
			return criteria;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteria.add(new Criterion(condition));
		}

		protected void addCriterion(String condition, Object value, String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property + " cannot be null");
			}
			criteria.add(new Criterion(condition, value));
		}

		protected void addCriterion(String condition, Object value1, Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property + " cannot be null");
			}
			criteria.add(new Criterion(condition, value1, value2));
		}

		protected void addCriterionForJDBCDate(String condition, Date value, String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property + " cannot be null");
			}
			addCriterion(condition, new java.sql.Date(value.getTime()), property);
		}

		protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property + " cannot be null or empty");
			}
			List<java.sql.Date> dateList = new ArrayList<>();
			Iterator<Date> iter = values.iterator();
			while (iter.hasNext()) {
				dateList.add(new java.sql.Date(iter.next().getTime()));
			}
			addCriterion(condition, dateList, property);
		}

		protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property + " cannot be null");
			}
			addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
		}

		protected void addCriterionForJDBCTime(String condition, Date value, String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property + " cannot be null");
			}
			addCriterion(condition, new java.sql.Time(value.getTime()), property);
		}

		protected void addCriterionForJDBCTime(String condition, List<Date> values, String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property + " cannot be null or empty");
			}
			List<java.sql.Time> timeList = new ArrayList<>();
			Iterator<Date> iter = values.iterator();
			while (iter.hasNext()) {
				timeList.add(new java.sql.Time(iter.next().getTime()));
			}
			addCriterion(condition, timeList, property);
		}

		protected void addCriterionForJDBCTime(String condition, Date value1, Date value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property + " cannot be null");
			}
			addCriterion(condition, new java.sql.Time(value1.getTime()), new java.sql.Time(value2.getTime()), property);
		}

		public Criteria andTaskIdIsNull() {
			addCriterion("TASK_ID is null");
			return (Criteria) this;
		}

		public Criteria andTaskIdIsNotNull() {
			addCriterion("TASK_ID is not null");
			return (Criteria) this;
		}

		public Criteria andTaskIdEqualTo(Long value) {
			addCriterion("TASK_ID =", value, "taskId");
			return (Criteria) this;
		}

		public Criteria andTaskIdNotEqualTo(Long value) {
			addCriterion("TASK_ID <>", value, "taskId");
			return (Criteria) this;
		}

		public Criteria andTaskIdGreaterThan(Long value) {
			addCriterion("TASK_ID >", value, "taskId");
			return (Criteria) this;
		}

		public Criteria andTaskIdGreaterThanOrEqualTo(Long value) {
			addCriterion("TASK_ID >=", value, "taskId");
			return (Criteria) this;
		}

		public Criteria andTaskIdLessThan(Long value) {
			addCriterion("TASK_ID <", value, "taskId");
			return (Criteria) this;
		}

		public Criteria andTaskIdLessThanOrEqualTo(Long value) {
			addCriterion("TASK_ID <=", value, "taskId");
			return (Criteria) this;
		}

		public Criteria andTaskIdIn(List<Long> values) {
			addCriterion("TASK_ID in", values, "taskId");
			return (Criteria) this;
		}

		public Criteria andTaskIdNotIn(List<Long> values) {
			addCriterion("TASK_ID not in", values, "taskId");
			return (Criteria) this;
		}

		public Criteria andTaskIdBetween(Long value1, Long value2) {
			addCriterion("TASK_ID between", value1, value2, "taskId");
			return (Criteria) this;
		}

		public Criteria andTaskIdNotBetween(Long value1, Long value2) {
			addCriterion("TASK_ID not between", value1, value2, "taskId");
			return (Criteria) this;
		}

		public Criteria andDatIsNull() {
			addCriterion("DAT is null");
			return (Criteria) this;
		}

		public Criteria andDatIsNotNull() {
			addCriterion("DAT is not null");
			return (Criteria) this;
		}

		public Criteria andDatEqualTo(Date value) {
			addCriterionForJDBCDate("DAT =", value, "dat");
			return (Criteria) this;
		}

		public Criteria andDatNotEqualTo(Date value) {
			addCriterionForJDBCDate("DAT <>", value, "dat");
			return (Criteria) this;
		}

		public Criteria andDatGreaterThan(Date value) {
			addCriterionForJDBCDate("DAT >", value, "dat");
			return (Criteria) this;
		}

		public Criteria andDatGreaterThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("DAT >=", value, "dat");
			return (Criteria) this;
		}

		public Criteria andDatLessThan(Date value) {
			addCriterionForJDBCDate("DAT <", value, "dat");
			return (Criteria) this;
		}

		public Criteria andDatLessThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("DAT <=", value, "dat");
			return (Criteria) this;
		}

		public Criteria andDatIn(List<Date> values) {
			addCriterionForJDBCDate("DAT in", values, "dat");
			return (Criteria) this;
		}

		public Criteria andDatNotIn(List<Date> values) {
			addCriterionForJDBCDate("DAT not in", values, "dat");
			return (Criteria) this;
		}

		public Criteria andDatBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("DAT between", value1, value2, "dat");
			return (Criteria) this;
		}

		public Criteria andDatNotBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("DAT not between", value1, value2, "dat");
			return (Criteria) this;
		}

		public Criteria andDattoIsNull() {
			addCriterion("DATTO is null");
			return (Criteria) this;
		}

		public Criteria andDattoIsNotNull() {
			addCriterion("DATTO is not null");
			return (Criteria) this;
		}

		public Criteria andDattoEqualTo(Date value) {
			addCriterionForJDBCDate("DATTO =", value, "datto");
			return (Criteria) this;
		}

		public Criteria andDattoNotEqualTo(Date value) {
			addCriterionForJDBCDate("DATTO <>", value, "datto");
			return (Criteria) this;
		}

		public Criteria andDattoGreaterThan(Date value) {
			addCriterionForJDBCDate("DATTO >", value, "datto");
			return (Criteria) this;
		}

		public Criteria andDattoGreaterThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("DATTO >=", value, "datto");
			return (Criteria) this;
		}

		public Criteria andDattoLessThan(Date value) {
			addCriterionForJDBCDate("DATTO <", value, "datto");
			return (Criteria) this;
		}

		public Criteria andDattoLessThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("DATTO <=", value, "datto");
			return (Criteria) this;
		}

		public Criteria andDattoIn(List<Date> values) {
			addCriterionForJDBCDate("DATTO in", values, "datto");
			return (Criteria) this;
		}

		public Criteria andDattoNotIn(List<Date> values) {
			addCriterionForJDBCDate("DATTO not in", values, "datto");
			return (Criteria) this;
		}

		public Criteria andDattoBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("DATTO between", value1, value2, "datto");
			return (Criteria) this;
		}

		public Criteria andDattoNotBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("DATTO not between", value1, value2, "datto");
			return (Criteria) this;
		}

		public Criteria andEmpIdIsNull() {
			addCriterion("EMP_ID is null");
			return (Criteria) this;
		}

		public Criteria andEmpIdIsNotNull() {
			addCriterion("EMP_ID is not null");
			return (Criteria) this;
		}

		public Criteria andEmpIdEqualTo(Long value) {
			addCriterion("EMP_ID =", value, "empId");
			return (Criteria) this;
		}

		public Criteria andEmpIdNotEqualTo(Long value) {
			addCriterion("EMP_ID <>", value, "empId");
			return (Criteria) this;
		}

		public Criteria andEmpIdGreaterThan(Long value) {
			addCriterion("EMP_ID >", value, "empId");
			return (Criteria) this;
		}

		public Criteria andEmpIdGreaterThanOrEqualTo(Long value) {
			addCriterion("EMP_ID >=", value, "empId");
			return (Criteria) this;
		}

		public Criteria andEmpIdLessThan(Long value) {
			addCriterion("EMP_ID <", value, "empId");
			return (Criteria) this;
		}

		public Criteria andEmpIdLessThanOrEqualTo(Long value) {
			addCriterion("EMP_ID <=", value, "empId");
			return (Criteria) this;
		}

		public Criteria andEmpIdIn(List<Long> values) {
			addCriterion("EMP_ID in", values, "empId");
			return (Criteria) this;
		}

		public Criteria andEmpIdNotIn(List<Long> values) {
			addCriterion("EMP_ID not in", values, "empId");
			return (Criteria) this;
		}

		public Criteria andEmpIdBetween(Long value1, Long value2) {
			addCriterion("EMP_ID between", value1, value2, "empId");
			return (Criteria) this;
		}

		public Criteria andEmpIdNotBetween(Long value1, Long value2) {
			addCriterion("EMP_ID not between", value1, value2, "empId");
			return (Criteria) this;
		}

		public Criteria andWorkTimeIsNull() {
			addCriterion("WORK_TIME is null");
			return (Criteria) this;
		}

		public Criteria andWorkTimeIsNotNull() {
			addCriterion("WORK_TIME is not null");
			return (Criteria) this;
		}

		public Criteria andWorkTimeEqualTo(Date value) {
			addCriterionForJDBCTime("WORK_TIME =", value, "workTime");
			return (Criteria) this;
		}

		public Criteria andWorkTimeNotEqualTo(Date value) {
			addCriterionForJDBCTime("WORK_TIME <>", value, "workTime");
			return (Criteria) this;
		}

		public Criteria andWorkTimeGreaterThan(Date value) {
			addCriterionForJDBCTime("WORK_TIME >", value, "workTime");
			return (Criteria) this;
		}

		public Criteria andWorkTimeGreaterThanOrEqualTo(Date value) {
			addCriterionForJDBCTime("WORK_TIME >=", value, "workTime");
			return (Criteria) this;
		}

		public Criteria andWorkTimeLessThan(Date value) {
			addCriterionForJDBCTime("WORK_TIME <", value, "workTime");
			return (Criteria) this;
		}

		public Criteria andWorkTimeLessThanOrEqualTo(Date value) {
			addCriterionForJDBCTime("WORK_TIME <=", value, "workTime");
			return (Criteria) this;
		}

		public Criteria andWorkTimeIn(List<Date> values) {
			addCriterionForJDBCTime("WORK_TIME in", values, "workTime");
			return (Criteria) this;
		}

		public Criteria andWorkTimeNotIn(List<Date> values) {
			addCriterionForJDBCTime("WORK_TIME not in", values, "workTime");
			return (Criteria) this;
		}

		public Criteria andWorkTimeBetween(Date value1, Date value2) {
			addCriterionForJDBCTime("WORK_TIME between", value1, value2, "workTime");
			return (Criteria) this;
		}

		public Criteria andWorkTimeNotBetween(Date value1, Date value2) {
			addCriterionForJDBCTime("WORK_TIME not between", value1, value2, "workTime");
			return (Criteria) this;
		}

		public Criteria andDescriptionIsNull() {
			addCriterion("DESCRIPTION is null");
			return (Criteria) this;
		}

		public Criteria andDescriptionIsNotNull() {
			addCriterion("DESCRIPTION is not null");
			return (Criteria) this;
		}

		public Criteria andDescriptionEqualTo(String value) {
			addCriterion("DESCRIPTION =", value, "description");
			return (Criteria) this;
		}

		public Criteria andDescriptionNotEqualTo(String value) {
			addCriterion("DESCRIPTION <>", value, "description");
			return (Criteria) this;
		}

		public Criteria andDescriptionGreaterThan(String value) {
			addCriterion("DESCRIPTION >", value, "description");
			return (Criteria) this;
		}

		public Criteria andDescriptionGreaterThanOrEqualTo(String value) {
			addCriterion("DESCRIPTION >=", value, "description");
			return (Criteria) this;
		}

		public Criteria andDescriptionLessThan(String value) {
			addCriterion("DESCRIPTION <", value, "description");
			return (Criteria) this;
		}

		public Criteria andDescriptionLessThanOrEqualTo(String value) {
			addCriterion("DESCRIPTION <=", value, "description");
			return (Criteria) this;
		}

		public Criteria andDescriptionLike(String value) {
			addCriterion("DESCRIPTION like", value, "description");
			return (Criteria) this;
		}

		public Criteria andDescriptionNotLike(String value) {
			addCriterion("DESCRIPTION not like", value, "description");
			return (Criteria) this;
		}

		public Criteria andDescriptionIn(List<String> values) {
			addCriterion("DESCRIPTION in", values, "description");
			return (Criteria) this;
		}

		public Criteria andDescriptionNotIn(List<String> values) {
			addCriterion("DESCRIPTION not in", values, "description");
			return (Criteria) this;
		}

		public Criteria andDescriptionBetween(String value1, String value2) {
			addCriterion("DESCRIPTION between", value1, value2, "description");
			return (Criteria) this;
		}

		public Criteria andDescriptionNotBetween(String value1, String value2) {
			addCriterion("DESCRIPTION not between", value1, value2, "description");
			return (Criteria) this;
		}
	}

	/**
	 * This class was generated by MyBatis Generator. This class corresponds to the database table TASKS_HIST
	 * @mbg.generated  Tue Jun 23 13:10:31 MSK 2020
	 */
	public static class Criterion {
		private String condition;
		private Object value;
		private Object secondValue;
		private boolean noValue;
		private boolean singleValue;
		private boolean betweenValue;
		private boolean listValue;
		private String typeHandler;

		public String getCondition() {
			return condition;
		}

		public Object getValue() {
			return value;
		}

		public Object getSecondValue() {
			return secondValue;
		}

		public boolean isNoValue() {
			return noValue;
		}

		public boolean isSingleValue() {
			return singleValue;
		}

		public boolean isBetweenValue() {
			return betweenValue;
		}

		public boolean isListValue() {
			return listValue;
		}

		public String getTypeHandler() {
			return typeHandler;
		}

		protected Criterion(String condition) {
			super();
			this.condition = condition;
			this.typeHandler = null;
			this.noValue = true;
		}

		protected Criterion(String condition, Object value, String typeHandler) {
			super();
			this.condition = condition;
			this.value = value;
			this.typeHandler = typeHandler;
			if (value instanceof List<?>) {
				this.listValue = true;
			} else {
				this.singleValue = true;
			}
		}

		protected Criterion(String condition, Object value) {
			this(condition, value, null);
		}

		protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
			super();
			this.condition = condition;
			this.value = value;
			this.secondValue = secondValue;
			this.typeHandler = typeHandler;
			this.betweenValue = true;
		}

		protected Criterion(String condition, Object value, Object secondValue) {
			this(condition, value, secondValue, null);
		}
	}

	/**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table TASKS_HIST
     *
     * @mbg.generated do_not_delete_during_merge Fri Jun 19 17:36:56 MSK 2020
     */
    public static class Criteria extends GeneratedCriteria {
        protected Criteria() {
            super();
        }
    }
}