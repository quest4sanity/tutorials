package q4s.tutorials.mybatis.annot.entity;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

public class RevisionHistExample {
    /**
	 * This field was generated by MyBatis Generator. This field corresponds to the database table REVISION_HIST
	 * @mbg.generated  Tue Jun 23 13:10:31 MSK 2020
	 */
	protected String orderByClause;
	/**
	 * This field was generated by MyBatis Generator. This field corresponds to the database table REVISION_HIST
	 * @mbg.generated  Tue Jun 23 13:10:31 MSK 2020
	 */
	protected boolean distinct;
	/**
	 * This field was generated by MyBatis Generator. This field corresponds to the database table REVISION_HIST
	 * @mbg.generated  Tue Jun 23 13:10:31 MSK 2020
	 */
	protected List<Criteria> oredCriteria;

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table REVISION_HIST
	 * @mbg.generated  Tue Jun 23 13:10:31 MSK 2020
	 */
	public RevisionHistExample() {
		oredCriteria = new ArrayList<>();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table REVISION_HIST
	 * @mbg.generated  Tue Jun 23 13:10:31 MSK 2020
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table REVISION_HIST
	 * @mbg.generated  Tue Jun 23 13:10:31 MSK 2020
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table REVISION_HIST
	 * @mbg.generated  Tue Jun 23 13:10:31 MSK 2020
	 */
	public void setDistinct(boolean distinct) {
		this.distinct = distinct;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table REVISION_HIST
	 * @mbg.generated  Tue Jun 23 13:10:31 MSK 2020
	 */
	public boolean isDistinct() {
		return distinct;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table REVISION_HIST
	 * @mbg.generated  Tue Jun 23 13:10:31 MSK 2020
	 */
	public List<Criteria> getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table REVISION_HIST
	 * @mbg.generated  Tue Jun 23 13:10:31 MSK 2020
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table REVISION_HIST
	 * @mbg.generated  Tue Jun 23 13:10:31 MSK 2020
	 */
	public Criteria or() {
		Criteria criteria = createCriteriaInternal();
		oredCriteria.add(criteria);
		return criteria;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table REVISION_HIST
	 * @mbg.generated  Tue Jun 23 13:10:31 MSK 2020
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table REVISION_HIST
	 * @mbg.generated  Tue Jun 23 13:10:31 MSK 2020
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table REVISION_HIST
	 * @mbg.generated  Tue Jun 23 13:10:31 MSK 2020
	 */
	public void clear() {
		oredCriteria.clear();
		orderByClause = null;
		distinct = false;
	}

	/**
	 * This class was generated by MyBatis Generator. This class corresponds to the database table REVISION_HIST
	 * @mbg.generated  Tue Jun 23 13:10:31 MSK 2020
	 */
	protected abstract static class GeneratedCriteria {
		protected List<Criterion> criteria;

		protected GeneratedCriteria() {
			super();
			criteria = new ArrayList<>();
		}

		public boolean isValid() {
			return criteria.size() > 0;
		}

		public List<Criterion> getAllCriteria() {
			return criteria;
		}

		public List<Criterion> getCriteria() {
			return criteria;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteria.add(new Criterion(condition));
		}

		protected void addCriterion(String condition, Object value, String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property + " cannot be null");
			}
			criteria.add(new Criterion(condition, value));
		}

		protected void addCriterion(String condition, Object value1, Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property + " cannot be null");
			}
			criteria.add(new Criterion(condition, value1, value2));
		}

		protected void addCriterionForJDBCDate(String condition, Date value, String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property + " cannot be null");
			}
			addCriterion(condition, new java.sql.Date(value.getTime()), property);
		}

		protected void addCriterionForJDBCDate(String condition, List<Date> values, String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property + " cannot be null or empty");
			}
			List<java.sql.Date> dateList = new ArrayList<>();
			Iterator<Date> iter = values.iterator();
			while (iter.hasNext()) {
				dateList.add(new java.sql.Date(iter.next().getTime()));
			}
			addCriterion(condition, dateList, property);
		}

		protected void addCriterionForJDBCDate(String condition, Date value1, Date value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property + " cannot be null");
			}
			addCriterion(condition, new java.sql.Date(value1.getTime()), new java.sql.Date(value2.getTime()), property);
		}

		public Criteria andRevIdIsNull() {
			addCriterion("REV_ID is null");
			return (Criteria) this;
		}

		public Criteria andRevIdIsNotNull() {
			addCriterion("REV_ID is not null");
			return (Criteria) this;
		}

		public Criteria andRevIdEqualTo(Long value) {
			addCriterion("REV_ID =", value, "revId");
			return (Criteria) this;
		}

		public Criteria andRevIdNotEqualTo(Long value) {
			addCriterion("REV_ID <>", value, "revId");
			return (Criteria) this;
		}

		public Criteria andRevIdGreaterThan(Long value) {
			addCriterion("REV_ID >", value, "revId");
			return (Criteria) this;
		}

		public Criteria andRevIdGreaterThanOrEqualTo(Long value) {
			addCriterion("REV_ID >=", value, "revId");
			return (Criteria) this;
		}

		public Criteria andRevIdLessThan(Long value) {
			addCriterion("REV_ID <", value, "revId");
			return (Criteria) this;
		}

		public Criteria andRevIdLessThanOrEqualTo(Long value) {
			addCriterion("REV_ID <=", value, "revId");
			return (Criteria) this;
		}

		public Criteria andRevIdIn(List<Long> values) {
			addCriterion("REV_ID in", values, "revId");
			return (Criteria) this;
		}

		public Criteria andRevIdNotIn(List<Long> values) {
			addCriterion("REV_ID not in", values, "revId");
			return (Criteria) this;
		}

		public Criteria andRevIdBetween(Long value1, Long value2) {
			addCriterion("REV_ID between", value1, value2, "revId");
			return (Criteria) this;
		}

		public Criteria andRevIdNotBetween(Long value1, Long value2) {
			addCriterion("REV_ID not between", value1, value2, "revId");
			return (Criteria) this;
		}

		public Criteria andDatIsNull() {
			addCriterion("DAT is null");
			return (Criteria) this;
		}

		public Criteria andDatIsNotNull() {
			addCriterion("DAT is not null");
			return (Criteria) this;
		}

		public Criteria andDatEqualTo(Date value) {
			addCriterionForJDBCDate("DAT =", value, "dat");
			return (Criteria) this;
		}

		public Criteria andDatNotEqualTo(Date value) {
			addCriterionForJDBCDate("DAT <>", value, "dat");
			return (Criteria) this;
		}

		public Criteria andDatGreaterThan(Date value) {
			addCriterionForJDBCDate("DAT >", value, "dat");
			return (Criteria) this;
		}

		public Criteria andDatGreaterThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("DAT >=", value, "dat");
			return (Criteria) this;
		}

		public Criteria andDatLessThan(Date value) {
			addCriterionForJDBCDate("DAT <", value, "dat");
			return (Criteria) this;
		}

		public Criteria andDatLessThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("DAT <=", value, "dat");
			return (Criteria) this;
		}

		public Criteria andDatIn(List<Date> values) {
			addCriterionForJDBCDate("DAT in", values, "dat");
			return (Criteria) this;
		}

		public Criteria andDatNotIn(List<Date> values) {
			addCriterionForJDBCDate("DAT not in", values, "dat");
			return (Criteria) this;
		}

		public Criteria andDatBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("DAT between", value1, value2, "dat");
			return (Criteria) this;
		}

		public Criteria andDatNotBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("DAT not between", value1, value2, "dat");
			return (Criteria) this;
		}

		public Criteria andDattoIsNull() {
			addCriterion("DATTO is null");
			return (Criteria) this;
		}

		public Criteria andDattoIsNotNull() {
			addCriterion("DATTO is not null");
			return (Criteria) this;
		}

		public Criteria andDattoEqualTo(Date value) {
			addCriterionForJDBCDate("DATTO =", value, "datto");
			return (Criteria) this;
		}

		public Criteria andDattoNotEqualTo(Date value) {
			addCriterionForJDBCDate("DATTO <>", value, "datto");
			return (Criteria) this;
		}

		public Criteria andDattoGreaterThan(Date value) {
			addCriterionForJDBCDate("DATTO >", value, "datto");
			return (Criteria) this;
		}

		public Criteria andDattoGreaterThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("DATTO >=", value, "datto");
			return (Criteria) this;
		}

		public Criteria andDattoLessThan(Date value) {
			addCriterionForJDBCDate("DATTO <", value, "datto");
			return (Criteria) this;
		}

		public Criteria andDattoLessThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("DATTO <=", value, "datto");
			return (Criteria) this;
		}

		public Criteria andDattoIn(List<Date> values) {
			addCriterionForJDBCDate("DATTO in", values, "datto");
			return (Criteria) this;
		}

		public Criteria andDattoNotIn(List<Date> values) {
			addCriterionForJDBCDate("DATTO not in", values, "datto");
			return (Criteria) this;
		}

		public Criteria andDattoBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("DATTO between", value1, value2, "datto");
			return (Criteria) this;
		}

		public Criteria andDattoNotBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("DATTO not between", value1, value2, "datto");
			return (Criteria) this;
		}

		public Criteria andStateIdIsNull() {
			addCriterion("STATE_ID is null");
			return (Criteria) this;
		}

		public Criteria andStateIdIsNotNull() {
			addCriterion("STATE_ID is not null");
			return (Criteria) this;
		}

		public Criteria andStateIdEqualTo(Long value) {
			addCriterion("STATE_ID =", value, "stateId");
			return (Criteria) this;
		}

		public Criteria andStateIdNotEqualTo(Long value) {
			addCriterion("STATE_ID <>", value, "stateId");
			return (Criteria) this;
		}

		public Criteria andStateIdGreaterThan(Long value) {
			addCriterion("STATE_ID >", value, "stateId");
			return (Criteria) this;
		}

		public Criteria andStateIdGreaterThanOrEqualTo(Long value) {
			addCriterion("STATE_ID >=", value, "stateId");
			return (Criteria) this;
		}

		public Criteria andStateIdLessThan(Long value) {
			addCriterion("STATE_ID <", value, "stateId");
			return (Criteria) this;
		}

		public Criteria andStateIdLessThanOrEqualTo(Long value) {
			addCriterion("STATE_ID <=", value, "stateId");
			return (Criteria) this;
		}

		public Criteria andStateIdIn(List<Long> values) {
			addCriterion("STATE_ID in", values, "stateId");
			return (Criteria) this;
		}

		public Criteria andStateIdNotIn(List<Long> values) {
			addCriterion("STATE_ID not in", values, "stateId");
			return (Criteria) this;
		}

		public Criteria andStateIdBetween(Long value1, Long value2) {
			addCriterion("STATE_ID between", value1, value2, "stateId");
			return (Criteria) this;
		}

		public Criteria andStateIdNotBetween(Long value1, Long value2) {
			addCriterion("STATE_ID not between", value1, value2, "stateId");
			return (Criteria) this;
		}

		public Criteria andManagerIdIsNull() {
			addCriterion("MANAGER_ID is null");
			return (Criteria) this;
		}

		public Criteria andManagerIdIsNotNull() {
			addCriterion("MANAGER_ID is not null");
			return (Criteria) this;
		}

		public Criteria andManagerIdEqualTo(Long value) {
			addCriterion("MANAGER_ID =", value, "managerId");
			return (Criteria) this;
		}

		public Criteria andManagerIdNotEqualTo(Long value) {
			addCriterion("MANAGER_ID <>", value, "managerId");
			return (Criteria) this;
		}

		public Criteria andManagerIdGreaterThan(Long value) {
			addCriterion("MANAGER_ID >", value, "managerId");
			return (Criteria) this;
		}

		public Criteria andManagerIdGreaterThanOrEqualTo(Long value) {
			addCriterion("MANAGER_ID >=", value, "managerId");
			return (Criteria) this;
		}

		public Criteria andManagerIdLessThan(Long value) {
			addCriterion("MANAGER_ID <", value, "managerId");
			return (Criteria) this;
		}

		public Criteria andManagerIdLessThanOrEqualTo(Long value) {
			addCriterion("MANAGER_ID <=", value, "managerId");
			return (Criteria) this;
		}

		public Criteria andManagerIdIn(List<Long> values) {
			addCriterion("MANAGER_ID in", values, "managerId");
			return (Criteria) this;
		}

		public Criteria andManagerIdNotIn(List<Long> values) {
			addCriterion("MANAGER_ID not in", values, "managerId");
			return (Criteria) this;
		}

		public Criteria andManagerIdBetween(Long value1, Long value2) {
			addCriterion("MANAGER_ID between", value1, value2, "managerId");
			return (Criteria) this;
		}

		public Criteria andManagerIdNotBetween(Long value1, Long value2) {
			addCriterion("MANAGER_ID not between", value1, value2, "managerId");
			return (Criteria) this;
		}
	}

	/**
	 * This class was generated by MyBatis Generator. This class corresponds to the database table REVISION_HIST
	 * @mbg.generated  Tue Jun 23 13:10:31 MSK 2020
	 */
	public static class Criterion {
		private String condition;
		private Object value;
		private Object secondValue;
		private boolean noValue;
		private boolean singleValue;
		private boolean betweenValue;
		private boolean listValue;
		private String typeHandler;

		public String getCondition() {
			return condition;
		}

		public Object getValue() {
			return value;
		}

		public Object getSecondValue() {
			return secondValue;
		}

		public boolean isNoValue() {
			return noValue;
		}

		public boolean isSingleValue() {
			return singleValue;
		}

		public boolean isBetweenValue() {
			return betweenValue;
		}

		public boolean isListValue() {
			return listValue;
		}

		public String getTypeHandler() {
			return typeHandler;
		}

		protected Criterion(String condition) {
			super();
			this.condition = condition;
			this.typeHandler = null;
			this.noValue = true;
		}

		protected Criterion(String condition, Object value, String typeHandler) {
			super();
			this.condition = condition;
			this.value = value;
			this.typeHandler = typeHandler;
			if (value instanceof List<?>) {
				this.listValue = true;
			} else {
				this.singleValue = true;
			}
		}

		protected Criterion(String condition, Object value) {
			this(condition, value, null);
		}

		protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
			super();
			this.condition = condition;
			this.value = value;
			this.secondValue = secondValue;
			this.typeHandler = typeHandler;
			this.betweenValue = true;
		}

		protected Criterion(String condition, Object value, Object secondValue) {
			this(condition, value, secondValue, null);
		}
	}

	/**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table REVISION_HIST
     *
     * @mbg.generated do_not_delete_during_merge Fri Jun 19 17:36:56 MSK 2020
     */
    public static class Criteria extends GeneratedCriteria {
        protected Criteria() {
            super();
        }
    }
}